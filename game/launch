package.cpath=package.cpath..';.\\?.dll'

-- 版本信息
_luastg_version=0x1000
_luastg_min_support=0x1000

---stack trace back function. called when engine error
---@param msg string
---@param level number
---@return string
function Traceback(msg, level)
	local TRACE_MAX_LEVEL = 64
	local ret = ''
	if msg then
		ret = msg .. '\n'
	end
	ret = ret .. 'stack traceback:'
	while true do
		local info = debug.getinfo(level + 1, "Slnf")
		if not info then
			break
		end
		local msgs = {}
		local source = info.source or ''
		if info.short_src == '[C]' then
			source = '[C]'
		else
			source = string.format('[%s]', source)
		end
		table.insert(msgs, string.format('    %s', source, info.currentline, info.name or ""))
		if info.currentline > 0 then
			table.insert(msgs, string.format('%d:', info.currentline))
		end
		if info.namewhat and info.name then
			table.insert(msgs, string.format(' in function \'%s\'', info.name))
		else
			if info.what == 'm' or info.linedefined == 0 then
				table.insert(msgs, ' in main chunk')
			elseif info.what == 'C' then
				table.insert(msgs, string.format(' at %s', tostring(info.func)))
			else
				table.insert(msgs, string.format(' in function <%s:%d>', source, info.linedefined))
			end
		end
		ret = ret .. '\n' .. table.concat(msgs, '')
		level = level + 1
		if level > TRACE_MAX_LEVEL then
			ret = ret .. '\n...'
			break
		end
	end
	return ret
end

for k,v in pairs(lstg) do _G[k]=v end
UnitList=ObjList
GetnUnit=GetnObj

ShowSplashWindow()

function Serialize(o)
	if type(o) == 'table' then
		-- 特殊处理：lstg中部分表将数据保存在metatable的data域中，因此对于table必须重新生成一个干净的table进行序列化操作
		function visitTable(t)
			local ret = {}
			if getmetatable(t) and getmetatable(t).data then
				t = getmetatable(t).data
			end
			for k,v in pairs(t) do
				if type(v) == 'table' then
					ret[k] = visitTable(v)
				else
					ret[k] = v
				end
			end
			return ret
		end
		o = visitTable(o)
	end
	return cjson.encode(o)
end

function DeSerialize(s)
	return cjson.decode(s)
end

-- 按键常量
KEY={NULL=0x00}

KEY.LBUTTON=0x01
KEY.RBUTTON=0x02
KEY.MBUTTON=0x04

KEY.ESCAPE=0x1B
KEY.BACKSPACE=0x08
KEY.TAB=0x09
KEY.ENTER=0x0D
KEY.SPACE=0x20

KEY.SHIFT=0x10
KEY.CTRL=0x11
KEY.ALT=0x12

KEY.LWIN=0x5B
KEY.RWIN=0x5C
KEY.APPS=0x5D

KEY.PAUSE=0x13
KEY.CAPSLOCK=0x14
KEY.NUMLOCK=0x90
KEY.SCROLLLOCK=0x91

KEY.PGUP=0x21
KEY.PGDN=0x22
KEY.HOME=0x24
KEY.END=0x23
KEY.INSERT=0x2D
KEY.DELETE=0x2E

KEY.LEFT=0x25
KEY.UP=0x26
KEY.RIGHT=0x27
KEY.DOWN=0x28

KEY['0']=0x30
KEY['1']=0x31
KEY['2']=0x32
KEY['3']=0x33
KEY['4']=0x34
KEY['5']=0x35
KEY['6']=0x36
KEY['7']=0x37
KEY['8']=0x38
KEY['9']=0x39

KEY.A=0x41
KEY.B=0x42
KEY.C=0x43
KEY.D=0x44
KEY.E=0x45
KEY.F=0x46
KEY.G=0x47
KEY.H=0x48
KEY.I=0x49
KEY.J=0x4A
KEY.K=0x4B
KEY.L=0x4C
KEY.M=0x4D
KEY.N=0x4E
KEY.O=0x4F
KEY.P=0x50
KEY.Q=0x51
KEY.R=0x52
KEY.S=0x53
KEY.T=0x54
KEY.U=0x55
KEY.V=0x56
KEY.W=0x57
KEY.X=0x58
KEY.Y=0x59
KEY.Z=0x5A

KEY.GRAVE=0xC0
KEY.MINUS=0xBD
KEY.EQUALS=0xBB
KEY.BACKSLASH=0xDC
KEY.LBRACKET=0xDB
KEY.RBRACKET=0xDD
KEY.SEMICOLON=0xBA
KEY.APOSTROPHE=0xDE
KEY.COMMA=0xBC
KEY.PERIOD=0xBE
KEY.SLASH=0xBF

KEY.NUMPAD0=0x60
KEY.NUMPAD1=0x61
KEY.NUMPAD2=0x62
KEY.NUMPAD3=0x63
KEY.NUMPAD4=0x64
KEY.NUMPAD5=0x65
KEY.NUMPAD6=0x66
KEY.NUMPAD7=0x67
KEY.NUMPAD8=0x68
KEY.NUMPAD9=0x69

KEY.MULTIPLY=0x6A
KEY.DIVIDE=0x6F
KEY.ADD=0x6B
KEY.SUBTRACT=0x6D
KEY.DECIMAL=0x6E

KEY.F1=0x70
KEY.F2=0x71
KEY.F3=0x72
KEY.F4=0x73
KEY.F5=0x74
KEY.F6=0x75
KEY.F7=0x76
KEY.F8=0x77
KEY.F9=0x78
KEY.F10=0x79
KEY.F11=0x7A
KEY.F12=0x7B

for i=1,32 do
	KEY['JOY1_'..i]=0x91+i
	KEY['JOY2_'..i]=0xDE+i
end

default_setting=
{
	allowsnapshot=true,
	username='User',
	font='',
	timezone=8,
	resx=1280,
	resy=720,
	res=1,
	windowed=true,
	vsync=false,
	sevolume=30,
	bgmvolume=100,
	mod='TUO_pre2',
	keys={
		up=KEY.UP,
		down=KEY.DOWN,
		left=KEY.LEFT,
		right=KEY.RIGHT,
		slow=KEY.SHIFT,
		shoot=KEY.Z,
		spell=KEY.X,
		special=KEY.C,
	},
	keys2={
		up=KEY.NUMPAD5,
		down=KEY.NUMPAD2,
		left=KEY.NUMPAD1,
		right=KEY.NUMPAD3,
		slow=KEY.A,
		shoot=KEY.S,
		spell=KEY.D,
		special=KEY.F,
	},
	keysys={
		repfast=KEY.CTRL,
		repslow=KEY.SHIFT,
		menu=KEY.ESCAPE,
		snapshot=KEY.HOME,
		retry=KEY.R,
	},
	joysticks={
		up=KEY.JOY1_1,
		down=KEY.JOY1_2,
		left=KEY.JOY1_3,
		right=KEY.JOY1_4,
		slow=KEY.JOY1_10,
		shoot=KEY.JOY1_5,
		spell=KEY.JOY1_6,
		special=KEY.JOY1_7,
		repfast=KEY.JOY1_10,
		repslow=KEY.JOY1_9,
		menu=KEY.JOY1_12,
		snapshot=KEY.JOY1_11,
		retry=KEY.JOY1_8
	}
}

default_network=
{
	server='127.0.0.1',
	port=26033,
	name='LSTGPlayer',
	delay=-1
}

local function format_json(str)
	local ret = ''
	local indent = '	'
	local level = 0
	local in_string = false
	for i = 1, #str do
		local s = string.sub(str, i, i)
		if s == '{' and (not in_string) then
			level = level + 1
			ret = ret .. '{\n' .. string.rep(indent, level)
		elseif s == '}' and (not in_string) then
			level = level - 1
			ret = string.format(
					'%s\n%s}', ret, string.rep(indent, level))
		elseif s == '"' then
			in_string = not in_string
			ret = ret .. '"'
		elseif s == ':' and (not in_string) then
			ret = ret .. ': '
		elseif s == ',' and (not in_string) then
			ret = ret .. ',\n'
			ret = ret .. string.rep(indent, level)
		elseif s == '[' and (not in_string) then
			level = level + 1
			ret = ret .. '[\n' .. string.rep(indent, level)
		elseif s == ']' and (not in_string) then
			level = level - 1
			ret = string.format(
					'%s\n%s]', ret, string.rep(indent, level))
		else
			ret = ret .. s
		end
	end
	return ret
end

local settingfile="Library\\setting"
local networkfile="Library\\network.txt"

--分辨率适配，第一次启动用
DealResolution = function ()
	-- local res_tmp=EnumResolutions()
	local res_result={}
	local has_16_9=false
	for _,v in pairs(res_tmp) do
		if abs(v[1]/v[2]-16/9)<0.01 then --玄学操作防止浮点数误差
			has_16_9=true end 
		table.insert(res_result,v)
	end
	--排序懒得
	if setting.windowed then
		--因为现在窗口再大也不会被挤出去了，所以随便浪
	else
		if has_16_9 then
			--检查设置内的分辨率是否正好在系统提供的分辨率中也有
			local flag=false
			for _,v in pairs(res_result) do
				if v[1] == setting.resx and v[2] == setting.resy then flag=true return end
			end
			--找不到的话以最高分辨率开全屏
			if flag then 
				for _,v in pairs(res_result) do
					if v[1]>setting.resx then setting.resx=v[1] setting.resy=v[2] end
				end
			end
		else
			
		end
	end
end

loadNetwork = function()
	f,msg=io.open(networkfile,'r')
	if f==nil then
		network=DeSerialize(Serialize(default_network))
	else
		network=DeSerialize(f:read('*a'))
		f:close()
	end
end

function saveNetwork()
	local f,msg
	f,msg=io.open(networkfile,'w')
	if f==nil then
		error(msg)
	else
		f:write(format_json(Serialize(network)))
		f:close()
	end
end

loadConfigure = function()
	local f,msg
	f,msg=io.open(settingfile,'r')
	if f==nil then
		setting=DeSerialize(Serialize(default_setting))
	else
		setting=DeSerialize(f:read('*a'))
		f:close()
	end
	-- DealResolution()
	loadNetwork()
end

function saveConfigure()
	local f,msg
	f,msg=io.open(settingfile,'w')
	if f==nil then
		error(msg)
	else
		f:write(format_json(Serialize(setting)))
		f:close()
	end
	saveNetwork()
end

loadConfigure()-- 先装载一次配置

if setting.showcfg == nil or setting.showcfg == true then
	-- 重新加载配置
	loadConfigure()
end

saveConfigure()-- 保存

if #args>=2 then loadstring(args[2])() end

if not start_game then
	setting.mod='launcher'
	--setting.resx=480
	--setting.resy=640
	--setting.windowed=true
	setting.nosplash=true
	setting.allowsnapshot=false
end

-- if updatelib then
	-- lfs.chdir('data')
	-- os.execute('..\\..\\tools\\7z\\7z.exe u -tzip -mcu=on -r ..\\Library\\data.zip *')
	-- lfs.chdir('..')
-- end




for _,v in ipairs({"se","music","font","data",--[["background"]]}) do
	local packpath="Library\\"..v..".zip"
	local packpath_sub="Library\\"..v.."_sub.zip"
	if not (lfs.attributes(packpath_sub)==nil) then
		LoadPackSub(packpath_sub)
	elseif not (lfs.attributes(packpath)==nil) then
		LoadPack(packpath)
	end
end


if setting.mod~='launcher' then
	if not(lfs.attributes('Library\\'..setting.mod..'_pw.zip')==nil) then
		LoadPackSub('Library\\'..setting.mod..'_pw.zip')--正常加载加密mod
	elseif not(lfs.attributes('Library\\'..setting.mod..'.zip')==nil) then
		LoadPack('Library\\'..setting.mod..'.zip')--正常加载mod
	else
		--找不到，不加载mod
	end
else
	if lfs.attributes('launcher.lua')==nil then
		--尝试加载启动器包
		if not(lfs.attributes('Library\\launcher.zip')==nil) then
			-- LoadPackSub('mod\\launcher.zip')--正常加载启动器
			LoadPack('Library\\launcher.zip')--正常加载启动器
		else
			--找不到启动器包，尝试使用data.zip里面的启动器
		end
	else
		--使用游戏根目录里面的启动器
	end
end


SetSplash(false)
SetTitle('东方梦无垠 ~ The Unreachabe Oneiroborder')
SetWindowed(setting.windowed)
SetResolution(setting.resx,setting.resy)
SetFPS(60)
SetVsync(setting.vsync)
SetSEVolume(setting.sevolume/100)
SetBGMVolume(setting.bgmvolume/100)